<?php declare(strict_types=1);
namespace Tests\functional\Template\BlockHandle\Blocks\Storage\Driver\S3;

use Aws\S3\S3Client;
use Ntuple\Synctree\Exceptions\ISynctreeException;
use Ntuple\Synctree\Plan\PlanStorage;
use Ntuple\Synctree\Template\BlockHandle\Blocks\Storage\Driver\S3\S3Create;
use Ntuple\Synctree\Template\BlockHandle\Blocks\Storage\Driver\S3\S3DeleteObject;
use Ntuple\Synctree\Template\BlockHandle\IBlock;
use Ntuple\Synctree\Util\Extra\ExtraManager;
use Throwable;

/**
 * @since SRT-187
 */
class S3DeleteObjectBlockTest extends S3BlockTestCase
{
    private $randomKey;

    protected function setUp(): void
    {
        parent::setUp();

        $client = new S3Client(self::$connectionInfo[0]);

        $this->randomKey = bin2hex(openssl_random_pseudo_bytes(20));

        $client->putObject([
            'Bucket' => self::$connectionInfo[1],
            'Key' => $this->randomKey
        ]);
    }

    protected function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub

        $client = new S3Client(self::$connectionInfo[0]);

        $client->deleteObject([
            'Bucket' => self::$connectionInfo[1],
            'Key' => $this->randomKey
        ]);
    }

    /**
     * @test
     * @testdox delete 블럭은 s3 에서 지정된 키를 삭제한다.
     * @depends test_env_available
     * @throws ISynctreeException
     * @throws Throwable
     */
    public function delete_block_deletes_the_object()
    {
        $storage = $this->createStub(PlanStorage::class);
        $extra = $this->createStub(ExtraManager::class);

        $connInfo = $this->createStub(IBlock::class);
        $connInfo->method('do')->willReturn(self::$connectionInfo);

        $bucket = $this->createStub(IBlock::class);
        $bucket->method('do')
            ->willReturn(self::$connectionInfo[1]);

        $key = $this->createStub(IBlock::class);
        $key->method('do')
            ->willReturn($this->randomKey);

        $handleCreator = new S3Create($storage, $extra, $connInfo);
        $sut = new S3DeleteObject($storage, $extra, $handleCreator, $key, $bucket);

        $blockStorage = [];
        $result = $sut->do($blockStorage);

        $this->assertNotEmpty($result);

        $keyExists = $handleCreator->do($blockStorage)->getClient()
            ->doesObjectExist(self::$connectionInfo[1], $this->randomKey);

        $this->assertFalse($keyExists);
    }
}